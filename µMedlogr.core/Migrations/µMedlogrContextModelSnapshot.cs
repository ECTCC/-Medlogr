// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using µMedlogr.core;

#nullable disable

namespace µMedlogr.core.Migrations
{
    [DbContext(typeof(µMedlogrContext))]
    partial class µMedlogrContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppUserPerson", b =>
                {
                    b.Property<string>("CareGiversId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PeopleInCareOfId")
                        .HasColumnType("int");

                    b.HasKey("CareGiversId", "PeopleInCareOfId");

                    b.HasIndex("PeopleInCareOfId");

                    b.ToTable("AppUserPerson");
                });

            modelBuilder.Entity("HealthRecordSymptomType", b =>
                {
                    b.Property<int>("CurrentSymptomsId")
                        .HasColumnType("int");

                    b.Property<int>("RecordsId")
                        .HasColumnType("int");

                    b.HasKey("CurrentSymptomsId", "RecordsId");

                    b.HasIndex("RecordsId");

                    b.ToTable("HealthRecordSymptomType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("µMedlogr.core.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("MeId")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("MeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "37290e33-eedf-4d2a-ae40-544c5da72297",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa38e27a-a23f-4977-a902-0e199d0e79da",
                            Email = "Test@Test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST@TEST.COM",
                            NormalizedUserName = "TEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEHuFGihfSqzz4qFhPBf/apjBQy4yILVsnNJku4i5JvYbtOLHz2gK3+nzBoNUloRLoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1514c361-7826-40cc-88a3-82c57b159dbe",
                            TwoFactorEnabled = false,
                            UserName = "Test"
                        });
                });

            modelBuilder.Entity("µMedlogr.core.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveSubstance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Drugs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveSubstance = "Kokain",
                            Effects = "[4]",
                            Form = 2,
                            Name = "Ipren"
                        },
                        new
                        {
                            Id = 2,
                            ActiveSubstance = "MDMA",
                            Effects = "[4,3,1]",
                            Form = 2,
                            Name = "Treo"
                        },
                        new
                        {
                            Id = 3,
                            ActiveSubstance = "Secret",
                            Effects = "[0]",
                            Form = 2,
                            Name = "Viagra"
                        },
                        new
                        {
                            Id = 4,
                            ActiveSubstance = "Kokain",
                            Effects = "[2]",
                            Form = 1,
                            Name = "Amoxicillin"
                        },
                        new
                        {
                            Id = 5,
                            ActiveSubstance = "alpha-methylphenethylamine",
                            Effects = "[4,0]",
                            Form = 7,
                            Name = "Thomas Energy Supplement"
                        });
                });

            modelBuilder.Entity("µMedlogr.core.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HealthRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime>("NotedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("µMedlogr.core.Models.HealthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("HealthRecords");
                });

            modelBuilder.Entity("µMedlogr.core.Models.HealthRecordEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HealthRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeSymptomWasChecked")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("HealthRecordsEntrys");
                });

            modelBuilder.Entity("µMedlogr.core.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("WeightInKg")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "[]",
                            DateOfBirth = new DateOnly(2023, 12, 11),
                            NickName = "Totte",
                            WeightInKg = 55f
                        });
                });

            modelBuilder.Entity("µMedlogr.core.Models.SymptomMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HealthRecordEntryId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectiveSeverity")
                        .HasColumnType("int");

                    b.Property<int>("SymptomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordEntryId");

                    b.HasIndex("SymptomId");

                    b.ToTable("SymptomMeasurements");
                });

            modelBuilder.Entity("µMedlogr.core.Models.SymptomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("MeasureInterval")
                        .HasColumnType("time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SymptomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MeasureInterval = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Snuva"
                        },
                        new
                        {
                            Id = 2,
                            MeasureInterval = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Hosta"
                        },
                        new
                        {
                            Id = 3,
                            MeasureInterval = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Feber"
                        },
                        new
                        {
                            Id = 4,
                            MeasureInterval = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Huvudvärk"
                        },
                        new
                        {
                            Id = 5,
                            MeasureInterval = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Låg Energi"
                        },
                        new
                        {
                            Id = 6,
                            MeasureInterval = new TimeSpan(0, 0, 0, 0, 0),
                            Name = "Nedsatt prestationsförmåga"
                        });
                });

            modelBuilder.Entity("µMedlogr.core.Models.TemperatureData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HealthRecordId")
                        .HasColumnType("int");

                    b.Property<float>("Measurement")
                        .HasColumnType("real");

                    b.Property<DateTime>("TimeOfMeasurement")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HealthRecordId");

                    b.ToTable("TemperatureDatas");
                });

            modelBuilder.Entity("AppUserPerson", b =>
                {
                    b.HasOne("µMedlogr.core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("CareGiversId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("µMedlogr.core.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PeopleInCareOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthRecordSymptomType", b =>
                {
                    b.HasOne("µMedlogr.core.Models.SymptomType", null)
                        .WithMany()
                        .HasForeignKey("CurrentSymptomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("µMedlogr.core.Models.HealthRecord", null)
                        .WithMany()
                        .HasForeignKey("RecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("µMedlogr.core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("µMedlogr.core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("µMedlogr.core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("µMedlogr.core.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("µMedlogr.core.Models.AppUser", b =>
                {
                    b.HasOne("µMedlogr.core.Models.Person", "Me")
                        .WithMany()
                        .HasForeignKey("MeId");

                    b.Navigation("Me");
                });

            modelBuilder.Entity("µMedlogr.core.Models.Drug", b =>
                {
                    b.HasOne("µMedlogr.core.Models.Event", null)
                        .WithMany("AdministeredMedicines")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("µMedlogr.core.Models.Event", b =>
                {
                    b.HasOne("µMedlogr.core.Models.HealthRecord", null)
                        .WithMany("Events")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("µMedlogr.core.Models.HealthRecord", b =>
                {
                    b.HasOne("µMedlogr.core.Models.Person", "Person")
                        .WithOne("HealthRecord")
                        .HasForeignKey("µMedlogr.core.Models.HealthRecord", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("µMedlogr.core.Models.HealthRecordEntry", b =>
                {
                    b.HasOne("µMedlogr.core.Models.HealthRecord", null)
                        .WithMany("Entries")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("µMedlogr.core.Models.SymptomMeasurement", b =>
                {
                    b.HasOne("µMedlogr.core.Models.HealthRecordEntry", null)
                        .WithMany("Measurements")
                        .HasForeignKey("HealthRecordEntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("µMedlogr.core.Models.SymptomType", "Symptom")
                        .WithMany()
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("µMedlogr.core.Models.TemperatureData", b =>
                {
                    b.HasOne("µMedlogr.core.Models.HealthRecord", null)
                        .WithMany("Temperatures")
                        .HasForeignKey("HealthRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("µMedlogr.core.Models.Event", b =>
                {
                    b.Navigation("AdministeredMedicines");
                });

            modelBuilder.Entity("µMedlogr.core.Models.HealthRecord", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Events");

                    b.Navigation("Temperatures");
                });

            modelBuilder.Entity("µMedlogr.core.Models.HealthRecordEntry", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("µMedlogr.core.Models.Person", b =>
                {
                    b.Navigation("HealthRecord")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
